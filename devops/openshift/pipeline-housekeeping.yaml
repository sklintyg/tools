apiVersion: v1
kind: List
items:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    generation: 1
    labels:
      stage: test
    name: housekeeping
  spec:
    triggers:
      - generic:
          allowEnv: true
          secret: nosecret
        type: Generic
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          def images = [
            'intygstjanst-test': '3.9.0',
            'logsender-test': '6.4.0',
            'minaintyg-test': '3.10.0',
            'webcert-test': '6.4.0',
            'rehabstod-test': '1.10.0',
            'privatlakarportal-test': '1.11.0',
            'statistik-test': '7.3.0',
            'srs-test': '1.2.0',
            'intygsbestallning-test': '0.0.1',
            'intygsadmin-test': '0.0.1'
          ]

          def suffix = [ "", "-artifact", "-verified" ]

          // run shell command, return status code
          def shell(cmd) {
            sh (
              script: cmd,
              returnStatus: true 
            ) 
          }
         
          // run shell command and signal an error on failure
          def eshell(cmd) {
            def rc = shell(cmd)
            if (rc != 0) {
              error("Error: shell command exited with error code ${rc}")
            }
          }

          pipeline {
            agent any
            stages {
              stage('Clean Pods') {
                steps {
                  script {
                    eshell("curl -s https://raw.githubusercontent.com/sklintyg/tools/develop/devops/openshift/clean-pods.sh > /tmp/clean-pods.sh")
                    shell("bash /tmp/clean-pods.sh")
                  }
                }
              }
              stage('Clean Images') {
                steps {
                  script {
                    eshell("curl -s https://raw.githubusercontent.com/sklintyg/tools/develop/devops/openshift/clean-istags.sh > /tmp/clean-istags.sh")
                    images.each { k, v ->
                      suffix.each { s ->
                        shell("bash /tmp/clean-istags.sh ${k}${s} ${v}")
                      }
                    }
                  }
                }
              }
              stage('Clean Reports') {
                steps {
                  script {
                    shell("find /var/lib/jenkins/reports/dintyg/*-pipeline/ -maxdepth 1 -type d -mtime +20 | xargs -r rm -rf")
                  }
                }
              }
            }
          }

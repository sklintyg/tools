kind: Template
apiVersion: v1
metadata:
  name: pipelinetemplate-test-webapp
parameters:
  - name: APP_NAME
    required: true
  - name: STAGE
    required: true
    value: "test"
  - name: BUILD_TEMPLATE
    required: true
    value: "buildtemplate-webapp"
  - name: DEPLOY_TEMPLATE
    required: true
    value: "deploytemplate-webapp"
  - name: TESTRUNNER_TEMPLATE
    required: true
    value: "testrunner-template"
  - name: ARTIFACT_IMAGE_SUFFIX
    required: true
    value: "artifact"
objects:
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      name: ${APP_NAME}-${STAGE}-pipeline
      generation: 1
      labels:
        app: ${APP_NAME}
        stage: ${STAGE}
    spec:
      triggers:
        - generic:
            allowEnv: true
            secret: QGHipU39T7guhCil14QR
          type: Generic
      strategy:
        jenkinsPipelineStrategy:
          type: JenkinsPipeline
          jenkinsfile: |-
            // The following variables are expected to be injected (from trigger) into the environment:
            // [ gitUrl, gitRef, buildVersion, infraVersion, commonVersion ]
            //
            // Build and Deploy temaples must previously have been installed
            //

            pipeline {
              agent any
              stages {

                stage('Prepare') {
                  steps {
                    script {
                      echo "Prepare configuration and other stuff"
                    }
                  }
                }

                stage('Build Images') {
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          def models = openshift.process("${BUILD_TEMPLATE}", 
                            "-p", "APP_NAME=${APP_NAME}", 
                            "-p", "GIT_URL=$gitUrl", 
                            "-p", "GIT_REF=$gitRef",
                            "-p", "BUILD_VERSION=$buildVersion", 
                            "-p", "STAGE=${STAGE}",
                            "-p", "INFRA_VERSION=$infraVersion",
                            "-p", "COMMON_VERSION=$commonVersion",
                            "-p", "ARTIFACT_IMAGE_SUFFIX=${ARTIFACT_IMAGE_SUFFIX}")
                          openshift.apply(models)

                          echo "Build artifact image ${APP_NAME}-${ARTIFACT_IMAGE_SUFFIX}"
                          //openshift.selector("bc", "${APP_NAME}-${ARTIFACT_IMAGE_SUFFIX}").startBuild().untilEach(1) {
                            //return it.object().status.phase == "Complete"
                          //}
                          echo "Build Completed"

                          echo "Build runtime image ${APP_NAME}"
                          //openshift.selector("bc", "${APP_NAME}").startBuild().untilEach(1) {
                            //return it.object().status.phase == "Complete"                            
                          //}
                          echo "Build Completed"
                        }
                      }
                    }
                  }
                }
                
                stage('Deploy Web App') {
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          // use shell script to fetch full image repo name
                          // TDOD: find a better way
                          def imageStream = sh (
                            script: "oc get is | grep '^${APP_NAME}\\ ' | awk '{ print \$2 }'",
                            returnStdout: true
                          ).trim()                          
                          echo "Use ImageStream: ${imageStream}"

                          def deployModel = openshift.process("${DEPLOY_TEMPLATE}", 
                            "-p", "APP_NAME=${APP_NAME}", 
                            "-p", "IMAGE='$imageStream:$buildVersion'", 
                            "-p", "STAGE=${STAGE}")                          
                          echo "Wait for rollout (limited to 5 minutes)"
                          timeout (5) {
                            def rm = openshift.apply(deployModel).narrow("dc").rollout()
                            echo "Waiting for deployment to complete"
                            rm.status()
                            echo "Deployment done."
                          }

                        }
                      }
                    }
                  }      
                }
              
                stage('Integration Test') {
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          echo "Do test"
                          // TODO: Find a better way                       
                          def svc = sh (
                            script: "oc get svc | grep '^${APP_NAME}\\ ' | awk '{ print \$2 }'",
                            returnStdout: true
                          ).trim()
                          
                          def targetUrl = "http://${svc}:8080"                         
                          echo "Service url is: ${targetUrl}"

                          //Setup callback webhook
                          hook = registerWebhook()

                          //Random ID to make sure jobs are uniquely named.
                          def id = UUID.randomUUID().toString()

                          def models = openshift.process("${TESTRUNNER_TEMPLATE}",
                            "-p", "TARGET_URL=${targetUrl}",
                            "-p", "GIT_URL='${gitUrl}",
                            "-p", "COMMON_VERSION=${commonVersion}",
                            "-p", "INFRA_VERSION=${infraVersion}",
                            "-p", "BUILD_VERSION=${buildVersion}",
                            "-p", "JOB_NAME=${env.JOB_NAME}",
                            "-p", "CALLBACK_URL=${hook.getUrl()}",
                            "-p", "BUILD_TAG=${env.BUILD_TAG}",
                            "-p", "ID=${}")
                          openshift.apply(models)
                          openshift.selector("job", testrunner-${env.BUILD_TAG}-${id}").create()

                          echo "Waiting for POST to ${hook.getURL()}"
                          data = waitForWebhook hook

                          echo "Publishing reports for ${JOB_NAME}/${buildVersion}"
                          publishHTML([
                            allowMissing: true,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: '/var/lib/jenkins/reports/$JOB_NAME/$buildVersion/',
                            reportFiles: 'index.html',
                            reportName: 'RestAssured results',
                          ])

                          if (data.trim().equals("SUCCESS")) {
                            echo "Build SUCCESS"
                          } else {
                            error("Build failed, see reports for details")
                          }
                        }
                      }
                    }
                  }
                }

                stage('Cleanup') {
                  steps {
                    script {
                      echo "Do cleanup"
                      def sel = openshift.selector("dc", "${APP_NAME}")
                      if (sel.exists()) {
                        echo "Tear down deployment"
                        sel.delete("--all")
                      }
                    }
                  }
                }

              }
            }
        
      




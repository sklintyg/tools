kind: Template
apiVersion: v1
metadata:
  name: pipelinetemplate-test-webapp
parameters:
  - name: APP_NAME
    required: true
  - name: STAGE
    required: true
    value: "test"
  - name: BUILD_TEMPLATE
    required: true
    value: "buildtemplate-webapp"
  - name: DEPLOY_TEMPLATE
    required: true
    value: "deploytemplate-webapp"
  - name: TESTRUNNER_TEMPLATE
    required: true
    value: "testrunnertemplate-pod"
  - name: ARTIFACT_IMAGE_SUFFIX
    required: true
    value: "artifact"
  - name: SECRET
    required: true
objects:
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      name: ${APP_NAME}-${STAGE}-pipeline
      generation: 1
      labels:
        app: ${APP_NAME}
        stage: ${STAGE}
    spec:
      triggers:
        - generic:
            allowEnv: true
            secret: ${SECRET}
          type: Generic
      strategy:
        jenkinsPipelineStrategy:
          type: JenkinsPipeline
          jenkinsfile: |-
            // The following variables are expected to be injected (from trigger) into the environment:
            // [ gitUrl, gitRef, buildVersion, infraVersion, commonVersion ]
            //
            // Build and Deploy temaples must previously have been installed
            //

            // TODO: find a better way
            def getImageStream() {
              // TDOD: find a better way
              return sh (
                script: "oc get is | grep '^${APP_NAME}\\ ' | awk '{ print \$2 }'",
                returnStdout: true
              ).trim()                          
            }

            pipeline {
              agent any
              stages {

                stage('Prepare') {
                  steps {
                    script {
                      echo "Prepare configuration and other stuff"
                    }
                  }
                }

                stage('Create Build Configuration') {
                  when {
                    expression {
                      // for testing purposes it might be good to skip this step, change to false
                      return true
                    }                      
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          def models = openshift.process("${BUILD_TEMPLATE}", 
                            "-p", "APP_NAME=${APP_NAME}", 
                            "-p", "GIT_URL=$gitUrl", 
                            "-p", "GIT_REF=$gitRef",
                            "-p", "BUILD_VERSION=$buildVersion", 
                            "-p", "STAGE=${STAGE}",
                            "-p", "INFRA_VERSION=$infraVersion",
                            "-p", "COMMON_VERSION=$commonVersion",
                            "-p", "ARTIFACT_IMAGE_SUFFIX=${ARTIFACT_IMAGE_SUFFIX}")
                          openshift.apply(models)
                        }
                      }
                    }
                  }
                }

                stage('Build App Artifact Image') {
                  when {
                    expression {
                      // for testing purposes it might be good to skip this step, change to false
                      return true
                    }                      
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          echo "Build artifact image ${APP_NAME}-${ARTIFACT_IMAGE_SUFFIX}"
                          openshift.selector("bc", "${APP_NAME}-${ARTIFACT_IMAGE_SUFFIX}").startBuild().untilEach(1) {
                            return it.object().status.phase == "Complete"
                          }
                          echo "Build Completed"
                        }
                      }
                    }
                  }
                }


                stage('Build App Runtime Image') {
                  when {
                    expression {
                      // for testing purposes it might be good to skip this step, change to false
                      return true
                    }                      
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          echo "Build runtime image ${APP_NAME}"
                          openshift.selector("bc", "${APP_NAME}").startBuild().untilEach(1) {
                            return it.object().status.phase == "Complete"                            
                          }
                          echo "Build Completed"
                        }
                      }
                    }
                  }
                }
                
                stage('Deploy App') {
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          def imageStream = getImageStream()
                          echo "Use ImageStream: ${imageStream}"

                          def deployModel = openshift.process("${DEPLOY_TEMPLATE}", 
                            "-p", "APP_NAME=${APP_NAME}", 
                            "-p", "IMAGE='$imageStream:$buildVersion'", 
                            "-p", "STAGE=${STAGE}")                          
                          echo "Wait for rollout (limited to 5 minutes)"
                          timeout (5) {
                            def rm = openshift.apply(deployModel).narrow("dc").rollout()
                            echo "Waiting for deployment to complete"
                            rm.status()
                            echo "Deployment done."
                          }

                        }
                      }
                    }
                  }      
                }
              
                stage('Run Integration Tests') {
                  when {
                    expression {
                      // for testing purposes it might be good to skip this step, change to false
                      return true
                    }                      
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          echo "Do test"

                          // Setup callback webhook
                          def hook = registerWebhook()

                          // Just use name
                          def targetUrl = "http://${APP_NAME}:8080"                         

                          def imageStream = getImageStream()
                          echo "Use ImageStream: ${imageStream}"

                          def models = openshift.process("${TESTRUNNER_TEMPLATE}",
                            "-p", "APP_NAME=${APP_NAME}", 
                            "-p", "IMAGE='${imageStream}-${ARTIFACT_IMAGE_SUFFIX}:${buildVersion}'", 
                            "-p", "STAGE=${STAGE}",                          
                            "-p", "TARGET_URL='${targetUrl}'",
                            "-p", "GIT_URL='${gitUrl}'",
                            "-p", "COMMON_VERSION=${commonVersion}",
                            "-p", "INFRA_VERSION=${infraVersion}",
                            "-p", "BUILD_VERSION=${buildVersion}",
                            "-p", "JOB_NAME=${env.JOB_NAME}",
                            "-p", "CALLBACK_URL='${hook.getURL()}'",
                            "-p", "BUILD_TAG=${env.BUILD_TAG}",
                            "-p", "COMMAND=restAssuredTest")
                          openshift.apply(models)
                          
                          def data = ""
                          timeout (10) {
                            echo "Waiting for POST to ${hook.getURL()}"
                            data = waitForWebhook hook
                            echo "Publishing reports for ${JOB_NAME}/${buildVersion}"
                            publishHTML([
                              allowMissing: true,
                              alwaysLinkToLastBuild: true,
                              keepAll: true,
                              reportDir: '/var/lib/jenkins/reports/$JOB_NAME/$buildVersion/',
                              reportFiles: 'index.html',
                              reportName: 'RestAssured results',
                            ])
                          }

                          if ("SUCCESS".equals(data.trim())) {
                            echo "Test SUCCESS"
                          } else {
                            error("Tests FAILED, see the reports for any details")
                          }
                        }
                      }
                    }
                  }
                }
              }

              post {
                success {
                  echo "promote application image"                  
                }

                always {
                  script {
                    echo "cleanup"
                    def imageStream = getImageStream()
                    sh (
                      script: "oc process ${DEPLOY_TEMPLATE} -p APP_NAME=\"${APP_NAME}\" -p IMAGE=\"${imageStream}:${buildVersion}\" -p STAGE=${STAGE} | oc delete -f -",
                      returnStatus: true
                    )
                  }                  
                }

                failure {
                  echo "Pipeline Failed :("
                }

              }

            }
        
      




kind: Template
apiVersion: v1
metadata:
  name: pipelinetemplate-test-webapp
parameters:
  - name: APP_NAME
    required: true
  - name: STAGE
    required: true
    value: "test"
  - name: BUILD_TEMPLATE
    required: true
    value: "buildtemplate-webapp"
  - name: DEPLOY_TEMPLATE
    required: true
    value: "deploytemplate-webapp"
  - name: TESTRUNNER_TEMPLATE
    required: true
    value: "testrunnertemplate-pod"
  - name: ARTIFACT_IMAGE_SUFFIX
    required: true
    value: "artifact"
  - name: SECRET
    required: true
  - name: TESTS
    value: ""
    required: true
objects:
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      name: ${APP_NAME}-pipeline
      generation: 1
      labels:
        app: ${APP_NAME}
        stage: ${STAGE}
    spec:
      triggers:
        - generic:
            allowEnv: true
            secret: ${SECRET}
          type: Generic
      strategy:
        jenkinsPipelineStrategy:
          type: JenkinsPipeline
          jenkinsfile: |-
            // The following variables are expected to be injected (from trigger) into the environment:
            // [ gitUrl, gitRef, buildVersion, infraVersion, commonVersion ]
            //
            // Build and Deploy temaples must previously have been installed
            //

            pipeline {
              agent any
              stages {

                stage('Prepare') {
                  steps {
                    script {
                      echo "Prepare configuration and check pre-conditions"
                      openshift.withCluster() {
                        openshift.withProject() {
                          echo "Pipeline started with:"
                          echo "gitUrl: ${gitUrl}, gitRef: ${gitRef}"
                          echo "buildVersion: ${buildVersion}, infraVersion: ${infraVersion}, commonVersion: ${commonVersion}"
                          // check envrionment
                          [ env.gitUrl, env.gitRef, env.buildVersion, env.infraVersion, env.commonVersion ].each {
                            if (!it) {
                              error("No such required context variable in environment.")
                            }
                          }

                          [ "${BUILD_TEMPLATE}", "${DEPLOY_TEMPLATE}", "${TESTRUNNER_TEMPLATE}" ].each {
                            def t = openshift.selector("template", it)
                            if (!t.exists()) {
                              error("No such required template: ${it}")
                            }
                          }
                        }
                      }
                    }
                  }
                }

                stage('Create Build Configuration') {
                  when {
                    expression {
                      return true
                    }                      
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          def models = openshift.process("${BUILD_TEMPLATE}", 
                            "-p", "APP_NAME=${APP_NAME}", 
                            "-p", "STAGE=${STAGE}",
                            "-p", "GIT_URL=${env.gitUrl}", 
                            "-p", "GIT_REF=${env.gitRef}",
                            "-p", "BUILD_VERSION=${env.buildVersion}", 
                            "-p", "INFRA_VERSION=${env.infraVersion}",
                            "-p", "COMMON_VERSION=${env.commonVersion}",
                            "-p", "ARTIFACT_IMAGE_SUFFIX=${ARTIFACT_IMAGE_SUFFIX}")
                          openshift.apply(models)
                        }
                      }
                    }
                  }
                }

                stage('Build App Artifact Image') {
                  when {
                    expression {
                      return true
                    }                      
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          echo "Build artifact image ${APP_NAME}-${ARTIFACT_IMAGE_SUFFIX}"
                          def build = openshift.selector("bc", "${APP_NAME}-${ARTIFACT_IMAGE_SUFFIX}").startBuild()                          
                          sleep(time: 1, unit: 'SECONDS')
                          echo "${build.name()} started" 
                          timeout (20) {
                            def status = ""
                            build.untilEach(1) {
                                status = it.object().status.phase
                                echo "Build status: ${status}" 
                                return !["Running", "Pending", "New"].contains(status)                            
                            }
                            if (status != "Complete") {
                              error("Build terminated with status: ${status}")
                            }
                            echo "Build Completed"
                          }
                        }
                      }
                    }
                  }
                }


                stage('Build App Runtime Image') {
                  when {
                    expression {
                      return true
                    }                      
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          echo "Build runtime image ${APP_NAME}"
                          def build = openshift.selector("bc", "${APP_NAME}").startBuild()
                          sleep(time: 1, unit: 'SECONDS')
                          echo "${build.name()} started" 
                          timeout (5) {
                            def status = ""
                            build.untilEach(1) {
                                status = it.object().status.phase
                                echo "Build status: ${status}" 
                                return !["Running", "Pending", "New"].contains(status)                            
                            }
                            if (status != "Complete") {
                              error("Build terminated with status: ${status}")
                            }
                            echo "Build Completed"
                          }
                        }
                      }
                    }
                  }
                }
                
                stage('Deploy App') {
                  when {
                    expression {
                      return true
                    }                      
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          def imageStream = openshift.selector("is", "${APP_NAME}").object().status.dockerImageRepository
                          echo "Use ImageStream: ${imageStream}"
                          def deployModel = openshift.process("${DEPLOY_TEMPLATE}", 
                            "-p", "APP_NAME=${APP_NAME}", 
                            "-p", "IMAGE='$imageStream:${env.buildVersion}'", 
                            "-p", "STAGE=${STAGE}")                          
                          echo "Wait for rollout (limited to 5 minutes)"
                          timeout (5) {
                            def rm = openshift.apply(deployModel).narrow("dc").rollout()
                            echo "Waiting for deployment to complete"
                            rm.status()
                            echo "Deployment done."
                          }

                        }
                      }
                    }
                  }      
                }
              
                stage('Run Integration Tests') {
                  when {
                    expression {
                      if ("${TESTS}") {
                        return true
                      }
                      return true
                    }                      
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          echo "Do test"

                          // Setup callback webhook
                          def hook = registerWebhook()

                          // Just use name
                          def targetUrl = "http://${APP_NAME}:8080"                         

                          def imageStream = openshift.selector("is", "${APP_NAME}").object().status.dockerImageRepository
                          echo "Use ImageStream: ${imageStream}"

                          // to make the pod name somewhat unique
                          // TODO: use generateName in Pod template, i.e. when it works
                          def num = (new Random().nextInt() % 100000) + 1
                          def suffix = (num < 0) ? "${num}" : "-${num}"
                          def pod = openshift.process("${TESTRUNNER_TEMPLATE}",
                            "-p", "APP_NAME=${APP_NAME}", 
                            "-p", "IMAGE='${imageStream}-${ARTIFACT_IMAGE_SUFFIX}:${env.buildVersion}'", 
                            "-p", "STAGE=${STAGE}",                          
                            "-p", "TARGET_URL='${targetUrl}'",
                            "-p", "BUILD_VERSION=${env.buildVersion}", 
                            "-p", "JOB_NAME=${env.JOB_NAME}",
                            "-p", "CALLBACK_URL='${hook.getURL()}'",
                            "-p", "BUILD_TAG=${env.BUILD_TAG}${suffix}",
                            "-p", "TESTS=${TESTS}")
                          openshift.apply(pod)
                          
                          def data = ""
                          timeout (60) {
                            echo "Waiting for POST to ${hook.getURL()}"
                            data = waitForWebhook(hook).trim()

                            def testmap = [ "restAssuredTest" : "restassured-results.html", 
                              "protractorTest" : "protractor-results.html", 
                              "fitnesseTest" : "fitnesse-results.html" ]
                            testmap.each { k, v ->
                              if ("${TESTS}".contains("${k}")) {
                                echo "Publishing ${k} reports for ${JOB_NAME}/${env.buildVersion}"
                                publishHTML([
                                  allowMissing: true,
                                  alwaysLinkToLastBuild: true,
                                  keepAll: true,
                                  reportDir: "/var/lib/jenkins/reports/$JOB_NAME/${env.buildVersion}/",
                                  reportFiles: "${v}",
                                  reportName: "${k.capitalize()} Results",
                                ])
                              }
                            }
                          }

                          if ("SUCCESS".equals(data)) {
                            echo "Test SUCCESS"
                          } else {
                            error("Tests FAILED, see reports for any details")
                          }
                        }
                      }
                    }
                  }
                }
              }

              post {
                success {
                  script {
                    openshift.withCluster() {
                      openshift.withProject() { 
                          def source = openshift.selector("is", "${APP_NAME}").object().status.dockerImageRepository
                          def project = openshift.project()
                          def target = "${project}/${APP_NAME}-verified"
                          echo "Promote image ${source} to is ${APP_NAME}-verified"
                          openshift.tag("${source}:${env.buildVersion}", "${target}:${env.buildVersion}", "${target}:latest")
                      }
                    }
                  }              
                }

                always {
                  script {
                    echo "cleanup"
                    openshift.withCluster() {
                      openshift.withProject() {
                        def image = openshift.selector("is", "${APP_NAME}").object()
                        def imageStream = image.status.dockerImageRepository
                        sh (
                          script: "oc process ${DEPLOY_TEMPLATE} -p APP_NAME=\"${APP_NAME}\" -p IMAGE=\"${imageStream}:${env.buildVersion}\" -p STAGE=${STAGE} | oc delete -f -",
                          returnStatus: true
                        )
                      }
                    }
                  }                  
                }

                failure {
                  echo "Pipeline Failed :("
                }

              }
            }
        
      




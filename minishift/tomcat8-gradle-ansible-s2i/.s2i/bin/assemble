#!/bin/bash

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /opt/s2i/destination/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ "$(ls -A /opt/s2i/destination/artifacts/ 2>/dev/null)" ]; then
    echo -n " Restoring saved artifacts from prior build..."
    mv /opt/s2i/destination/artifacts/.m2/repository $HOME/.m2
  fi
}

# Source code provided to S2I is at ${HOME}
LOCAL_SOURCE_DIR=${HOME}
mkdir -p $LOCAL_SOURCE_DIR

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build
# artifacts (*.war, *.jar)
# Changed by INTYG for gradle.
ARTIFACT_DIR=${ARTIFACT_DIR:-web/build/libs}


# Resulting WAR files will be deployed to $CATALINA_HOME/webapps
DEPLOY_DIR=$CATALINA_HOME/webapps
mkdir -p $DEPLOY_DIR

# Copy the source for compilation
cp -Rf /opt/s2i/destination/src/. $LOCAL_SOURCE_DIR
chgrp -R 0 $LOCAL_SOURCE_DIR
chmod -R g+rw $LOCAL_SOURCE_DIR

# Start ansible stuff
echo "Start extra provisioning using Ansible..."

if [ -f "ansible-openshift/provision.yml" ]; then
    cd ansible-openshift
    ansible-playbook -i "localhost," provision.yml -c local
    cd ..
    echo "Ansible provisioning done"
else
    echo "No file $LOCAL_SOURCE_DIR/ansible-openshift/provision.yml, skipping ansible for this build."
fi


# Start INTYG gradle building code
echo "injected vars: commonVersion: $commonVersion buildVersion: $buildVersion infraVersion: $infraVersion"
export JAVA_TOOL_OPTIONS="$JAVA_TOOL_OPTIONS -DcommonVersion=$commonVersion -DbuildVersion=$buildVersion -DinfraVersion=$infraVersion"

# Start build using gradle.
if [ -f "$LOCAL_SOURCE_DIR/build.gradle" ]; then

    echo "---> Building application from source..."
    GRADLE_ARGS=${GRADLE_ARGS:-"build"}
    echo "--> # GRADLE_ARGS = $GRADLE_ARGS"

    echo "---> Building application with gradle..."
    ./gradlew $GRADLE_ARGS

    ERR=$?
    if [ $ERR -ne 0 ]; then
        echo "Aborting due to error code $ERR from Gradle build"
        exit $ERR
    fi

    # cleanup after build
    echo -n "Cleaning $DEPLOY_DIR..."
    rm -rf $DEPLOY_DIR/*
    echo " cleaned up"

    # Copy built .war file into tomcat webapps
    result_file=$(find $ARTIFACT_DIR -name *.war)
    if [ -z "$result_file" ]; then
       echo "---> Build file $result_file could not be found"
       exit 1
    fi
    mv $result_file $DEPLOY_DIR/ROOT.war
    echo "Copied $result_file to $DEPLOY_DIR/ROOT.war"

    # Probably not necessary
    if [[ "$INCREMENTAL" = "false" ]]; then
      echo -n "INCREMENTAL is set to $INCREMENTAL, we are now cleaning image \"rm -rf . .m2\"..."
      rm -rf ./* .m2
      echo " cleaned up"
    fi
    # popd &> /dev/null
fi

# Finally, clean maven and gradle installs
rm -rf /usr/local/gradle
rm -rf /usr/local/apache-maven-3.5.0

echo "...done"

exit $rc
